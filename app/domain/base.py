"""Base models for domain models to inherit from."""

import datetime
import uuid
from typing import Generic, TypeVar

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
)

from app.utils.time_and_date import utc_now


class DomainBaseModel(BaseModel):
    """Base model for all domain models to inherit from."""

    def check_serializability(self) -> None:
        """
        Check that incoming SDK model is json-serializable.

        This should be called during all domain model conversions.

        Raises:
            ValidationError: If the model is not json-serializable.

        """
        self.model_validate(self.model_dump(mode="json"))


class SQLAttributeMixin(BaseModel):
    """
    Mixin for SQLAlchemy attributes.

    This is used to allow the use of Pydantic models with SQLAlchemy
    and add common properties.

    Note that `created_at` and `updated_at` are deliberately excluded
    to allow the database to manage these automatically.
    """

    id: uuid.UUID = Field(
        default_factory=uuid.uuid4,
        description="The autogenerated database ID.",
    )

    model_config = ConfigDict(from_attributes=True)


class SQLTimestampMixin(SQLAttributeMixin):
    """
    Mixin for SQLAlchemy timestamps.

    This should only be used to add timestamps to models for returning.
    Timestamps should not be directly set by the application.
    """

    created_at: datetime.datetime = Field(
        default_factory=utc_now,
        description="The timestamp at which the object was created.",
    )
    updated_at: datetime.datetime = Field(
        default_factory=utc_now,
        description="The timestamp at which the object was last updated.",
    )


class ProjectedBaseModel(BaseModel):
    """
    Base model for all projected models to inherit from.

    Projected models are models derived from a domain model. They duplicate or process
    data in helpful ways and may also be persisted.
    """


GenericProjectedBaseModelType = TypeVar(
    "GenericProjectedBaseModelType", bound=ProjectedBaseModel
)


class GenericProjection(Generic[GenericProjectedBaseModelType]):
    """Generic projection class for projected models."""
