"""Base models for domain models to inherit from."""

import datetime
import uuid
from abc import ABC, abstractmethod
from typing import Self

from destiny_sdk.core import _JsonlFileInputMixIn
from pydantic import BaseModel, ConfigDict, Field, model_validator

from app.utils.time_and_date import utc_now


class DomainBaseModel(BaseModel):
    """Base model for all domain models to inherit from."""

    @model_validator(mode="after")
    def check_json_serializable(self) -> Self:
        """Runtime check to ensure the model is JSON serializable."""
        json_str = self.model_dump(mode="json")
        self.model_validate(json_str)
        return self


class SQLAttributeMixin(BaseModel):
    """
    Mixin for SQLAlchemy attributes.

    This is used to allow the use of Pydantic models with SQLAlchemy
    and add common properties.

    Note that `created_at` and `updated_at` are deliberately excluded
    to allow the database to manage these automatically.
    """

    id: uuid.UUID = Field(
        default_factory=uuid.uuid4,
        description="The autogenerated database ID.",
    )

    model_config = ConfigDict(from_attributes=True)


class SQLTimestampMixin(SQLAttributeMixin):
    """
    Mixin for SQLAlchemy timestamps.

    This should only be used to add timestamps to models for returning.
    Timestamps should not be directly set by the application.
    """

    created_at: datetime.datetime = Field(
        default_factory=utc_now,
        description="The timestamp at which the object was created.",
    )
    updated_at: datetime.datetime = Field(
        default_factory=utc_now,
        description="The timestamp at which the object was last updated.",
    )


class SDKJsonlMixin(BaseModel, ABC):
    """
    Mixin for SDK JSONL attributes.

    This flags that the model is used by the SDK to marshal
    data in and out of JSONL files.
    """

    @abstractmethod
    async def to_sdk(self) -> _JsonlFileInputMixIn:
        """Convert the model to an SDK JSONL input mixin."""
